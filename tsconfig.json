{
  "compilerOptions": {
    "target": "ESNext", // ts 文件编译的 js 文件语法版本。
    "useDefineForClassFields": true, // TS3.7 之后新增属性, 编译后的类属性转换为Object.defineProperty 声明，对于没有赋值的类属性也会编译出来。
    "module": "ESNext",
    //  1 moduleResolution 模块解析
    //  2 模块解析是 typescript 编译器用何种方式来确定导入所指内容。
    //  moduleResolution："node" =>采用 node 模块解析的方式查找文件。[从内层到最高目录的外层查找 import 引入的文件]
    // moduleResolution："classic" => 采用 classic 模块解析的方式查找文件。[从外层到内层方式查找 查找 import 引入的文件]
    "moduleResolution": "Node",
    "strict": true,
    "jsx": "preserve", // 在 vue 中支持 类似 react jsx的语法格式。
    "resolveJsonModule": true, // 是否可以导入json文件。
    "isolatedModules": true, // export 接口或者type类型 会出现错误。
    //  有些依赖库底层 为了兼容CommonJs规范、AMD规范这二者的规范中相互兼容，使用了 export =，将二者规范统一。"esModuleInterop":true表示允许依赖库中出现export = 这种兼容规范导出的格式，TS 可以用import from导入
    "esModuleInterop": true,
    // 允许访问的底层依赖库
    "lib": ["ESNext", "DOM"],
    "skipLibCheck": true, // 对声明文件不进行类型检查
    "noEmit": true,
    // 通过 tsc 编译后输出目录。
    "rootDir": "./src", // 指定 TS 要编译的 TS 文件 源目录
    "outDir": "./tsbuild", //  通过 tsc 编译后的TS 文件输出目录。
    "allowJs": true, //  是否允许导入 js 文件。
    "declaration": true, //  编译后是否生成 d.ts文件
    "sourceMap": true, // ts编译后的js文件中生成Map文件
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"]
    }
  },
  // ts 编译器编译覆盖的范围。
  "include": [
    "src/**/*.ts",
    "src/**/*.d.ts",
    "src/**/*.tsx",
    "src/**/*.vue",
    "./vite.config.ts"
  ],
  "references": [{ "path": "./tsconfig.node.json" }]
}
